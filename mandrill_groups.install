<?php
/**
 * @file
 * Install hooks for mandrill_groups module.
 */

/**
 * Implements hook_install().
 */
function mandrill_groups_install() {
  // Necessary to get new node types defined in mandrill_groups_node_info().
  node_types_rebuild();
  // Configure content types.
  _mandrill_groups_config_content_types();
  // Create our custom fields.
  _mandrill_groups_create_fields();
  // Add fields to our new node types.
  mandrill_groups_add_field_instances();
  // Add permissions for OG node types.
  _mandrill_groups_add_permissions();

  $format_name = 'mandrill_groups_html';

  if (!filter_format_exists($format_name)) {
    // Add text formats.
    $format = array(
      'format' => $format_name,
      'name' => 'Mandrill Groups HTML',
      'weight' => 0,
      'filters' => array(
        // URL filter.
        $format_name => array(
          'weight' => 0,
          'status' => 1,
        ),
        // HTML corrector filter.
        'filter_htmlcorrector' => array(
          'weight' => 1,
          'status' => 1,
        ),
      ),
    );
    $format = (object) $format;
    filter_format_save($format);
  }

}

/**
 * Implements hook_enable().
 */
function mandrill_groups_enable() {
  mailsystem_set(array('mandrill_groups' => 'MandrillMailSystem'));
}

/**
 * Implements hook_disable().
 */
function mandrill_groups_disable() {
  // Tell mailsystem to remove mandrill groups:
  mailsystem_clear(array('mandrill_groups' => 'MandrillMailSystem'));
}

/**
 * Implements hook_uninstall().
 */
function mandrill_groups_uninstall() {

  $mandrill_groups_content_types = array('mandrill_groups_group', 'mandrill_groups_discussion');
  $sql = 'SELECT nid FROM {node} n WHERE n.type IN (:type)';
  $result = db_query($sql, array(':type' => $mandrill_groups_content_types));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);

  foreach ($mandrill_groups_content_types as $content_type) {
    node_type_delete($content_type);
  }
}

/**
 * Add all custom fields for the content types created by this module.
 */
function mandrill_groups_add_field_instances() {
  if (!field_info_instance('node', MANDRILL_GROUPS_EMAIL_FIELD, 'mandrill_groups_group')) {
    $email_field_instance = array(
      'entity_type' => 'node',
      'bundle' => 'mandrill_groups_group',
      'field_name' => MANDRILL_GROUPS_EMAIL_FIELD,
      'label' => t('Mandrill Groups Email'),
    );
    field_create_instance($email_field_instance);
  }

  if (!field_info_instance('node', MANDRILL_GROUPS_OG_REFERENCE_FIELD, 'mandrill_groups_discussion')) {
    $group_ref_instance = array(
      'entity_type' => 'node',
      'bundle' => 'mandrill_groups_discussion',
      'field_name' => MANDRILL_GROUPS_OG_REFERENCE_FIELD,
      'label' => t('Group Membership'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'og_complex',
        'module' => 'og',
      ),
      'settings' => array(
        'behaviors' => array(
          'og_widget' => array(
            'status' => 1,
            'default' => array(
              'widget_type' => 'options_select',
            ),
            'admin' => array(
              'widget_type' => 'entityreference_autocomplete',
            ),
            'access_override' => 0,
          ),
        ),
      ),
    );
    field_create_instance($group_ref_instance);
    og_create_field(MANDRILL_GROUPS_OG_REFERENCE_FIELD, 'node', 'mandrill_groups_discussion');
  }
}

/**
 * Configure content type settings.
 */
function _mandrill_groups_config_content_types() {
  // Don't display author and date information.
  variable_set('node_submitted_mandrill_groups_group', FALSE);
  variable_set('node_submitted_mandrill_groups_discussion', FALSE);
  $publishing_defaults = array(
    'status' => NODE_PUBLISHED,
    'promoted' => NODE_NOT_PROMOTED,
    'sticky' => NODE_NOT_STICKY,
  );
  variable_set('node_options_mandrill_groups_group', $publishing_defaults);
  variable_set('node_options_mandrill_groups_discussion', $publishing_defaults);
  // Commenting off for Groups, on for discussions..
  variable_set('comment_mandrill_groups_group', COMMENT_NODE_CLOSED);
  variable_set('comment_mandrill_groups_discussion', COMMENT_NODE_OPEN);
  // Default to no threading, as the email function doesn't handle it elegantly.
  variable_set('comment_default_mode_mandrill_groups_discussion', COMMENT_MODE_FLAT);
  // Add OG (organic groups) fields to content types by setting the
  // following variables. og_ui_node_type_save() reacts to the presence or
  // absence of these variables to determine whether to add OG fields to
  // the node type.
  variable_set('og_group_type_mandrill_groups_group', OG_STATE_ACTIVE);
  // Save the new content type via OG - this ensures fields necessary for
  // correct OG config are added to the content type. Also variables set above
  // are unset in og_ui_node_type_save().
  og_ui_node_type_save('mandrill_groups_group');
}

/**
 * Create and add the Organic Groups reference field & Group Email field.
 */
function _mandrill_groups_create_fields() {
  // Clear the field cache so the field type is found.
  field_cache_clear();
  $automatic_fields = array(
    MANDRILL_GROUPS_OG_REFERENCE_FIELD => array(
      'field_name' => MANDRILL_GROUPS_OG_REFERENCE_FIELD,
      'type' => 'entityreference',
      'locked' => FALSE,
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'node',
        'handler' => 'og',
        'handler_settings' => array(
          'target_bundles' => array(
            'mandrill_groups_group' => 'mandrill_groups_group',
          ),
          'sort' => array(
            'type' => 'property',
            'property' => 'title',
            'direction' => 'ASC',
          ),
          'membership_type' => 'og_membership_type_default',
        ),
      ),
    ),
    MANDRILL_GROUPS_EMAIL_FIELD => array(
      'field_name' => MANDRILL_GROUPS_EMAIL_FIELD,
      'type' => 'text',
      'locked' => TRUE,
      'settings' => array(
        'no_ui' => FALSE,
      ),
    ),
  );
  // If the fields don't already exist, create them.
  foreach ($automatic_fields as $field_name => $field_def) {
    $prior_field = field_read_field($field_name, array('include_inactive' => TRUE));
    if (empty($prior_field)) {
      $new_field = $field_def;
      field_create_field($new_field);
    }
  }
}

/**
 * Sets permissions on the Mandrill Group and Mandrill Discussion content types.
 */
function _mandrill_groups_add_permissions() {

  // Allows full access to Mandrill Groups and Discussions.
  // We do this because we want to defer to the og_role_permission table to set
  // create/edit/delete content permissions.
  $role_permissions = array(
    // Mandrill Discussion permissions.
    'create mandrill_groups_discussion content',
    'delete any mandrill_groups_discussion content',
    'delete own mandrill_groups_discussion content',
    'edit any mandrill_groups_discussion content',
    'edit own mandrill_groups_discussion content',
    // Mandrill Group permissions.
    'create mandrill_groups_group content',
    'delete any mandrill_groups_group content',
    'delete own mandrill_groups_group content',
    'edit any mandrill_groups_group content',
    'edit own mandrill_groups_group content',
  );

  $og_role_permissions = array(
    // Member permissions.
    'member' => array(
      // Mandrill Discussion permissions.
      'create mandrill_groups_discussion content',
      'delete own mandrill_groups_discussion content',
      'update own mandrill_groups_discussion content',
    ),
    // Admin member permissions.
    'administrator member' => array(
      // Mandrill Discussion permissions.
      'create mandrill_groups_discussion content',
      'delete any mandrill_groups_discussion content',
      'delete own mandrill_groups_discussion content',
      'update any mandrill_groups_discussion content',
      'update own mandrill_groups_discussion content',
    ),
  );

  // Get roles associated with each node type we define.
  $group_roles = og_roles('node', 'mandrill_groups_group');
  $discussion_roles = og_roles('node', 'mandrill_groups_discussion');

  // Set og_role_permission table permissions based on rids for each
  // group_bundle.
  foreach ($og_role_permissions as $role_name => $permissions) {
    if (in_array($role_name, $group_roles)) {
      $rid = array_search($role_name, $group_roles);
      og_role_grant_permissions($rid, $permissions);
    }
    if (in_array($role_name, $discussion_roles)) {
      $rid = array_search($role_name, $discussion_roles);
      og_role_grant_permissions($rid, $permissions);
    }
  }

  // Edit role_permissions table to allow any authenticated user to create
  // Groups or Discussions. This allows us to defer to permissions in the
  // og_role_permission table.
  foreach (user_roles(TRUE) as $rid => $role_name) {
    foreach ($role_permissions as $permission_name) {
      db_merge('role_permission')
        ->key(array(
          'rid' => $rid,
          'permission' => $permission_name,
        ))
        ->fields(array(
          'module' => 'mandrill_groups',
        ))
        ->execute();
    }
  }

  // Clear the user access cache. - @todo necessary? if so, we should also be clearing OG static vars.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}
