<?php
/**
 * @file
 * Install hooks for mandrill_groups module.
 */

/**
 * Implements hook_install().
 */
function mandrill_groups_install() {
  // Necessary to get new node types defined in mandrill_groups_node_info().
  node_types_rebuild();
  // Configure content types.
  _mandrill_groups_config_content_types();
  // Add fields to our new node types.
  _mandrill_groups_add_fields();
  // Add permissions for OG node types.
  _mandrill_groups_add_permissions();

  $format_name = 'mandrill_groups_html';

  if (!filter_format_exists($format_name)) {
    // Add text formats.
    $format = array(
      'format' => $format_name,
      'name' => 'Mandrill Groups HTML',
      'weight' => 0,
      'filters' => array(
        // URL filter.
        $format_name => array(
          'weight' => 0,
          'status' => 1,
        ),
        // HTML corrector filter.
        'filter_htmlcorrector' => array(
          'weight' => 1,
          'status' => 1,
        ),
      ),
    );
    $format = (object) $format;
    filter_format_save($format);
  }

}

/**
 * Implements hook_uninstall().
 */
function mandrill_groups_uninstall() {
  $mandrill_groups_content_types = array('mandrill_groups_group', 'mandrill_groups_discussion');
  $sql = 'SELECT nid FROM {node} n WHERE n.type IN (:type)';
  $result = db_query($sql, array(':type' => $mandrill_groups_content_types));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);
  foreach ($mandrill_groups_content_types as $content_type) {
    node_type_delete($content_type);
  }
}

/**
 * Add all custom fields for the content types created by this module.
 */
function _mandrill_groups_add_fields() {
  //@todo Set the discussion og_group_ref field to have cardinality 1.
  // Define content types that will be created.
  $mandrill_groups_content_types = array('mandrill_groups_group', 'mandrill_groups_discussion');

  // Create all fields associated with content types this module defines.
  $mandrill_groups_installed_fields = _mandrill_groups_installed_fields();
  foreach ($mandrill_groups_installed_fields as $field) {
    // @todo - possibly could get rid of this check
    $existing_field = field_info_field($field['field_name']);
    if (!$existing_field) {
      field_create_field($field);
    }
  }
  // Add field instances to content types.
  foreach ($mandrill_groups_content_types as $content_type) {
    if ($content_type == 'mandrill_groups_group') {
      $mandrill_groups_installed_instances = _mandrill_groups_installed_instances();
      foreach ($mandrill_groups_installed_instances as $instance) {
        $instance['bundle'] = $content_type;
        // @todo - possibly could get rid of this check
        $existing_instance = field_info_instance($instance['entity_type'], $instance['field_name'], $content_type);
        if (!$existing_instance) {
          field_create_instance($instance);
        }
      }
    }
  }
}

/**
 * Configure content type settings.
 */
function _mandrill_groups_config_content_types() {
  $mandrill_groups_content_types = array('mandrill_groups_group', 'mandrill_groups_discussion');

  foreach ($mandrill_groups_content_types as $content_type) {
    // // Set variables that are set by the node type edit form options tabs.
    if ($content_type == 'mandrill_groups_discussion') {
      // Don't display author and date information.
      variable_set('node_submitted_mandrill_groups_discussion', 0);
      // Not "promoted to front page".
      variable_set('node_options_mandrill_groups_discussion', array('status'));
      // Commenting closed.
      variable_set('comment_default_mode_mandrill_groups_discussion', 0);
      // Add OG (organic groups) fields to content types by setting the
      // following variables. og_ui_node_type_save() reacts to the presence or
      // absence of these variables to determine whether to add OG fields to
      // the node type.
      variable_set('og_group_content_type_' . $content_type, TRUE);
      variable_set('target_type_' . $content_type, 'node');
      variable_set('target_bundles_' . $content_type, array('mandrill_groups_group'));
    }
    elseif ($content_type == 'mandrill_groups_group') {
      // // Set variables that are set by the node type edit form options tabs.
      // Don't display author and date information.
      variable_set('node_submitted_mandrill_groups_group', 0);
      // Not "promoted to front page".
      variable_set('node_options_mandrill_groups_group', array('status'));
      // Commenting closed.
      variable_set('comment_mandrill_groups_group', 1);
      // Add OG (organic groups) fields to content types by setting the
      // following variables. og_ui_node_type_save() reacts to the presence or
      // absence of these variables to determine whether to add OG fields to
      // the node type.
      variable_set('og_group_type_' . $content_type, TRUE);
    }
    // Save the new content type via OG - this ensures fields necessary for
    // correct OG config are added to the content type. Also variables set above
    // are unset in og_ui_node_type_save().
    og_ui_node_type_save($content_type);
  }
}

/**
 * Define the fields for our content types.
 *
 * @return array
 *   An associative array specifying the fields to add to our
 *   new content types.
 */
function _mandrill_groups_installed_fields() {
  return array(
    'mandrill_groups_email' => array(
      'field_name' => 'mandrill_groups_email',
      'type' => 'text',
      'locked' => TRUE,
      'settings' => array(
        'no_ui' => FALSE,
      ),
    ),
  );
}

/**
 * Create field instances for our content types.
 *
 * @return array
 *   An associative array specifying the field instances set on our new
 *   content types.
 */
function _mandrill_groups_installed_instances() {
  return array(
    'mandrill_groups_email' => array(
      'entity_type' => 'node',
      'field_name' => 'mandrill_groups_email',
      'label' => t('Mandrill Groups Email'),
    ),
  );
}

/**
 * Sets permissions on the Mandrill Group and Mandrill Discussion content types.
 */
function _mandrill_groups_add_permissions() {

  // Allows full access to Mandrill Groups and Discussions.
  // We do this because we want to defer to the og_role_permission table to set
  // create/edit/delete content permissions.
  $role_permissions = array(
    // Mandrill Discussion permissions.
    'create mandrill_groups_discussion content',
    'delete any mandrill_groups_discussion content',
    'delete own mandrill_groups_discussion content',
    'edit any mandrill_groups_discussion content',
    'edit own mandrill_groups_discussion content',
    // Mandrill Group permissions.
    'create mandrill_groups_group content',
    'delete any mandrill_groups_group content',
    'delete own mandrill_groups_group content',
    'edit any mandrill_groups_group content',
    'edit own mandrill_groups_group content',
  );

  $og_role_permissions = array(
    // Member permissions.
    'member' => array(
      // Mandrill Discussion permissions.
      'create mandrill_groups_discussion content',
      'delete own mandrill_groups_discussion content',
      'update own mandrill_groups_discussion content',
    ),
    // Admin member permissions.
    'administrator member' => array(
      // Mandrill Discussion permissions.
      'create mandrill_groups_discussion content',
      'delete any mandrill_groups_discussion content',
      'delete own mandrill_groups_discussion content',
      'update any mandrill_groups_discussion content',
      'update own mandrill_groups_discussion content',
    ),
  );

  // Get roles associated with each node type we define.
  $group_roles = og_roles('node', 'mandrill_groups_group');
  $discussion_roles = og_roles('node', 'mandrill_groups_discussion');

  // Set og_role_permission table permissions based on rids for each
  // group_bundle.
  foreach ($og_role_permissions as $role_name => $permissions) {
    if (in_array($role_name, $group_roles)) {
      $rid = array_search($role_name, $group_roles);
      og_role_grant_permissions($rid, $permissions);
    }
    if (in_array($role_name, $discussion_roles)) {
      $rid = array_search($role_name, $discussion_roles);
      og_role_grant_permissions($rid, $permissions);
    }
  }

  // Edit role_permissions table to allow anyone to create Groups or
  // Discussions.
  // This allows us to defer to permissions in the og_role_permission table.
  foreach (user_roles() as $rid => $role_name) {
    foreach ($role_permissions as $permission_name) {
      db_merge('role_permission')
        ->key(array(
          'rid' => $rid,
          'permission' => $permission_name,
        ))
        ->fields(array(
          'module' => 'mandrill_groups',
        ))
        ->execute();
    }
  }

  // Clear the user access cache. - @todo necessary? if so, we should also be clearing OG static vars.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');
}
