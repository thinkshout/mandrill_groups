<?php

/**
 * @file
 * Allows for creation and management of discussion groups that can be
 * interacted with via Drupal or email.
 */

define('MANDRILL_GROUPS_OG_REFERENCE_FIELD', 'mandrill_groups_og_ref');
define('MANDRILL_GROUPS_EMAIL_FIELD', 'mandrill_groups_email');


/**
 * Implements hook_menu().
 */
function mandrill_groups_menu() {
  $items = array();

  $items['admin/config/services/mandrill/groups'] = array(
    'title' => 'Groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_settings_form'),
    'access callback' => array('mandrill_groups_access'),
    'description' => 'Handles Mandrill Incoming Webhooks',
    'file' => 'includes/mandrill_groups.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['mandrill/webhook/groups'] = array(
    'title' => 'Mandrill Inbound',
    'description' => 'Inbound email via Mandrill',
    'page callback' => 'mandrill_groups_process_webhook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/discussions'] = array(
    'title' => 'Discussions',
    'page callback' => 'group_node_discussions',
    'page arguments' => array(1),
    'access callback' => 'group_node_discussion_access',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/config/services/mandrill/groups/%/delete'] = array(
    'title' => 'Delete Inbound Domain Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_inbound_domain_delete_form', 5),
    'access arguments' => array('administer mandrill'),
    'file' => 'includes/mandrill_groups.admin.inc',
  );

  return $items;
}

/**
 * Access callback for mandrill_groups.
 *
 * @return bool
 *   True if current user has access to administer mandrill and valid Mandrill
 *   API key is present, else false.
 */
function mandrill_groups_access() {
  $access = user_access('administer mandrill');
  $valid_api_key = variable_get('mandrill_api_key');
  return $access & !empty($valid_api_key);
}

/**
 * Implements hook_permission().
 */
function mandrill_groups_permission() {
  return array(
    'administer mandrill discussion group' => array(
      'title' => t('Administer Mandrill Discussion Group'),
      'description' => t('Select which Mandrill Group a Mandrill Discussion is related to.'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Access callback for "Discussion" tab on Group nodes.
 *
 * Only show tab if user is a member of the Group.
 *
 * @param array $group
 *   Group being accessed.
 *
 * @return bool
 *   Return True if user is a member of the current Group.
 */
function group_node_discussion_access($group) {
  global $user;
  if (!og_is_member('node', $group->nid, 'user', $user)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Get all discussions for the current Group.
 *
 * @param array $group
 *   The group that is currently being viewed.
 *
 * @return array
 *   An array of rendered discussions for the current Group.
 */
function group_node_discussions($group) {

  // Construct database query to get all discussions related to the current
  // Group.
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->leftJoin('og_membership', 'o', 'n.nid = o.etid');
  $query->condition('n.status', NODE_PUBLISHED);
  $query->condition('o.entity_type', 'node');
  $query->condition('o.gid', $group->nid);
  $result = $query->execute();

  // Add link to create discussion if the user has permission to.
  $permission = 'create mandrill_groups_discussion content';
  $discussions = array();
  if (og_user_access('node', $group->nid, $permission)) {
    // Include group nid in URL to be used in setting default value on Mandrill
    // Discussion node form.
    $discussions['add_discussion'] = array(
      '#markup' => '<ul class="action-links"><li><a href="/node/add/mandrill-groups-discussion?nid=' . $group->nid . '">Add discussion</a></li></ul>',
    );
  }

  // Create render array of discussion teasers.
  foreach ($result as $nid) {
    $node = node_load($nid->nid);
    $discussion_teaser = node_view($node, 'teaser');
    $discussions[] = array(
      '#type' => 'markup',
      '#markup' => render($discussion_teaser),
    );
  }

  return $discussions;
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function mandrill_groups_node_info() {
  // Define content types.
  return array(
    'mandrill_groups_group' => array(
      'name' => t('Mandrill Group'),
      'base' => 'mandrill_groups',
      'description' => t('Users subscribe to a Mandrill Group to be notified of all new Mandrill Discussions within that group.'),
      'title_label' => t('Group Name'),
      // 'Locked' protects the machine name of this bundle from alteration.
      'locked' => TRUE,
    ),
    'mandrill_groups_discussion' => array(
      'name' => t('Mandrill Discussion'),
      'base' => 'mandrill_groups',
      'description' => t('Discussion thread that is part of a Mandrill Group. Users may opt in or out of individual Mandrill Discussions.'),
      'title_label' => t('Discussion Topic'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * We could get fancy with this form, but we're punting
 * and returning the default form that node_content provides.
 */
function mandrill_groups_form($node, $form_state) {
  $form = node_content_form($node, $form_state);
  if ($node->type == 'mandrill_groups_group') {
    if (isset($node->nid)) {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      list($default_name, $default_domain) = explode('@', $node_wrapper->mandrill_groups_email->value());
    }
    $form['email_user'] = array(
      '#type' => 'machine_name',
      '#title' => 'Email Address (name)',
      '#default_value' => isset($default_name) ? $default_name : $node->title,
      '#maxlength' => 32,
      '#machine_name' => array(
        'exists' => FALSE,
        'source' => array('title'),
        'label' => t('Email Name'),
      ),
      '#element_validate' => array('mandrill_groups_validate_group_email'),
      '#description' => t('A unique email name for this list. It must only contain lowercase letters, numbers, and underscores. The @domain part of the email address is selected below.'),
    );
    $domain_options = array();
    if ($inbound = mandrill_get_inbound_domains()) {
      foreach ($inbound as $domain) {
        $domain_options[$domain['domain']] = '@' . $domain['domain'];
        if (!$domain['valid_mx']) {
          $domain_options[$domain['domain']] .= ' (mx not validated)';
        }
      }
    }
    $form['email_domain'] = array(
      '#type' => 'select',
      '#title' => 'Email Domain (@domain.com)',
      '#options' => $domain_options,
      '#default_value' => isset($default_domain) ? $default_domain : '',
      '#required' => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function mandrill_groups_form_mandrill_groups_group_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the group email field, which is being built from other form elements
  // added in mandrill_groups_form().
  $form['mandrill_groups_email']['#access'] = FALSE;
  $form['#validate'][] = 'mandrill_groups_apply_form_settings';
}

/**
 * Field validator that looks for a unique email_user/email_domain combo.
 */
function mandrill_groups_validate_group_email($element, $form_state) {
  $email = $form_state['input']['email_user'] . '@' . $form_state['input']['email_domain'];
  $existing_node = mandrill_groups_load_by_mail($email);
  if (empty($existing_node)) {
    return;
  }
  if (!isset($form_state['node']->nid) || $form_state['node']->nid != $existing_node->nid) {
    form_error($element, t('The email address @email is already in use, please pick another.', array('@email' => $email)));
  }
}

/**
 * Validator to insert email address inputs into the proper field.
 */
function mandrill_groups_apply_form_settings($form, &$form_state) {
  $form_state['values']['mandrill_groups_email'][$form_state['values']['language']][0]['value'] = $form_state['values']['email_user'] . '@' . $form_state['values']['email_domain'];
}

/**
 * Webhook processing for mandrill_groups.
 */
function mandrill_groups_process_webhook() {
  if (!isset($_POST)) {
    return "Mandrill Groups Webhook Endpoint.";
  }
  // Validate any submissions with $_POST variables to confirm they are from
  // Mandrill.
  elseif (!mandrill_groups_webhook_validate()) {
    return 'Invalid signature.';
  }
  $events = drupal_json_decode($_POST['mandrill_events']);
  foreach ($events as $event) {
    // Process events:
    mandrill_groups_create_comment($event['msg']);
  }
  return count($events) . " events processed.";
}

/**
 * Validate that a webhook with post data is coming from Mandrill.
 * 
 * See http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 */
function mandrill_groups_webhook_validate() {
  $url = $GLOBALS['base_url'] . '/mandrill/webhook/groups?domain=' . $_GET['domain'];
  $key = NULL;
  $webhooks = mandrill_get_webhooks();
  foreach ($webhooks as $webhook) {
    if ($webhook['url'] == $url) {
      $key = $webhook['auth_key'];
      break;
    }
  }
  if (!$key) {
    return FALSE;
  }
  ksort($_POST);
  foreach ($_POST as $arg => $val) {
    $url .= $arg . $val;
  }
  $key = base64_encode(hash_hmac('sha1', $url, $key, TRUE));
  return $key == $_SERVER['HTTP_X_MANDRILL_SIGNATURE'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM ID: mandrill_groups_discussion_node_form.
 */
function mandrill_groups_form_mandrill_groups_discussion_node_form_alter(&$form, &$form_state, $form_id) {
  // Set default value of "Group Membership" field if we have the Group to
  // relate the new discussion to in the URL.
  $params = drupal_get_query_parameters();
  if (isset($params['nid'])) {
    $form['mandrill_groups_og_ref'][$form['language']['#value']][0]['default']['#default_value'][0] = $params['nid'];
  }
  $form['#validate'][] = 'mandrill_groups_add_discussion_group';
//  if (isset($_GET['nid'])) {
//    // @todo - isn't working
//    $form["field_accounts"][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['nid'];
//  }
//  $form['#submit'][] = 'tmp_set_value';
}

//function tmp_set_value(&$form, &$form_state) {
//  form_set_value('og_group_ref', $_GET['nid'], $form_state);
//}

/**
 * Relate Discussion node to a Group.
 *
 * Validator function for the Discussion node add form that relates the
 * Discussion being created to a Group if a Group nid is passed via the URL.
 */
function mandrill_groups_add_discussion_group(&$form, &$form_state) {
  $params = drupal_get_query_parameters();
  if (isset($params['nid'])) {
    form_set_value($form['mandrill_groups_og_ref'], array(
      LANGUAGE_NONE => array(
        0 => array(
          'target_id' => $params['nid'],
          'field_mode' => 'default',
        ),
      ),
    ), $form_state);
  }
}

/**
 * Create a new comment based on an email received via Mandrill.
 *
 * Formatting for the subject of the message will be special when attached to
 * an existing discussion, adding a tag to identify the discussion. Example:
 *
 * subject text [#MGD000001]
 *
 * If no #MGD tag is included, or an invalid number is given, a new discussion
 * will be created.
 */
function mandrill_groups_create_comment($message) {
  $user = user_load_by_mail($message['from_email']);
  if (!$user) {
    watchdog('mandrill_groups', 'Message from %email denied: no user with that email address exists.',
      array(
        '%email' => $message['from_email'],
      ));
    return FALSE;
  }
  $group = mandrill_groups_load_by_mail($message['email']);
  if (empty($group)) {
    watchdog('mandrill_groups', 'Message from %email denied: no group with the email address %groupemail exists.',
      array(
        '%email' => $message['from_email'],
        '%groupemail' => $message['email'],
      ));
    return FALSE;
  }
  if (!og_is_member('node', $group->nid, 'user', $user)) {
    // This email address doesn't have access to this group.
    watchdog('mandrill_groups', 'Message from %email denied because no user with that email address has access to group %groupname (NID: %groupid)',
      array(
        '%email' => $message['from_email'],
        '%groupname' => $group->title,
        '%groupid' => $group->nid,
      ));
    return FALSE;
  }
  // Parse the subject line to extract a discussion ID, if present:
  list($subject, $discussion_tag) = explode('[#MGD', $message['subject']);
  $subject = trim($subject);
  $discussion_tag = trim($discussion_tag, '] ');
  $discussion_id = (int) $discussion_tag;
  // Load existing discussion, or create a new one:
  $discussion = $discussion_id ? node_load($discussion_id) : mandrill_groups_create_discussion($subject, $group);
  $discussion_wrapper = entity_metadata_wrapper('node', $discussion);
  // Verify the discussion matches the group attached to this email address:
  if ($group->nid != $discussion_wrapper->{MANDRILL_GROUPS_OG_REFERENCE_FIELD}->raw()) {
    // Trying to post to a discussion using wrong group email.
    watchdog('mandrill_groups', 'Message from %email for discussion %discussion denied because the wrong targeting email was used (%groupemail)',
      array(
        '%email' => $message['from_email'],
        '%discussion' => $discussion->nid,
        '%groupemail' => $message['email'],
      ));
    return FALSE;
  }
  $comment_body = array(
    'value' => $message['html'],
    'format' => 'mandrill_groups_html',
  );
  $values = array(
    'subject' => $subject,
    'uid' => $user->uid,
    'nid' => $discussion->nid,
    'mail' => $message['from_email'],
    'name' => $user->name,
    'date' => 'now',
    'status' => COMMENT_PUBLISHED,
    'node_type' => 'comment_node_mandrill_groups_discussion',
  );
  $comment = entity_create('comment', $values);
  $wrapper = entity_metadata_wrapper('comment', $comment);
  $wrapper->comment_body->set($comment_body);
  // If you use more standard save methodology, the comment gets lost, so:
  comment_submit($comment);
  comment_save($comment);

  watchdog('mandrill_groups', 'Comment posted: %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)));
  return $comment;
}

/**
 * Load a Mandrill group node based on the group email.
 *
 * @return node[]
 *   Depending whether $email is set, an array of groups or a single one.
 */
function mandrill_groups_load_by_mail($email = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'mandrill_groups_group', '=');
  if ($email) {
    $query->fieldCondition('mandrill_groups_email', 'value', $email);
  }
  $results = $query->execute();
  if (isset($results['node'])) {
    $result_ids = array_keys($results['node']);
    $first = reset($result_ids);
    return $email ? node_load($first) : node_load_multiple($result_ids);
  }
  else {
    return array();
  }
}

/**
 * Create a new discussion within a group.
 */
function mandrill_groups_create_discussion($subject, $group) {
  $values = array(
    'type' => 'mandrill_groups_discussion',
    'uid' => $group->uid,
    'title' => $subject,
    'status' => 1,
    'comment' => 2,
    'promote' => 0,
  );
  $discussion = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $discussion);
  $wrapper->{MANDRILL_GROUPS_OG_REFERENCE_FIELD}->set((int) $group->nid);
  $wrapper->save();
  return $discussion;
}

/**
 * Implements hook_comment_insert().
 */
function mandrill_groups_comment_insert($comment) {
  if ($comment->node_type != 'comment_node_mandrill_groups_discussion') {
    return;
  }
  // Load posting user:
  $author = user_load($comment->uid);
  // Load parent group.
  $node = node_load($comment->nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  // Load members.
  $members = $node_wrapper->mandrill_groups_og_ref->members->value();
  // Check subscription data.
  // Check delivery preferences.
  // Create email.
  $addresses = array();
  foreach ($members as $member) {
    $addresses[] = $member->mail;
  }
  $content = field_view_field('comment', $comment, 'comment_body');
  $message = array(
    'id' => 'mandrill_groups_discussion',
    'to' => implode(',', $addresses),
    'subject' => $comment->subject . ' [#MGD' . $node->nid . ']',
    'body' => array($content[0]['#markup']),
    'headers' => array(
      'Reply-To' => $node_wrapper->mandrill_groups_og_ref->mandrill_groups_email->value(),
    ),
    'mandrill_from_name' => $author->name . ' via ' . variable_get('site_name', 'Drupal Site'),
    'mandrill_overrides' => array(
      'preserve_recipients' => FALSE,
    ),
  );
  
  drupal_mail('mandrill_groups', 'discussion', implode(',', $addresses), 'und', $message);
  // Set in-reply-to header (http://webapps.stackexchange.com/questions/965/how-does-gmail-decide-to-thread-email-messages)
  // Generate group-description text for email? Mergevars?
  // Send email.
}

/**
 * Implements hook_mail().
 */
function mandrill_groups_mail($key, &$message, $params) {
  if ($key == 'discussion') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}
