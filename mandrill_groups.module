<?php

/**
 * @file
 * Allows for creation and management of discussion groups that can be
 * interacted with via Drupal or email.
 */

define('MANDRILL_GROUPS_OG_REFERENCE_FIELD', 'mandrill_groups_og_ref');
define('MANDRILL_GROUPS_EMAIL_FIELD', 'mandrill_groups_email');


/**
 * Implements hook_menu().
 */
function mandrill_groups_menu() {
  $items = array();

  $items['admin/config/services/mandrill/groups'] = array(
    'title' => 'Groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_settings_form'),
    'access arguments' => array('administer mandrill'),
    'description' => 'Handles Mandrill Incoming Webhooks',
    'file' => 'mandrill_groups.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['mandrill/webhook/groups'] = array(
    'title' => 'Mandrill Inbound',
    'description' => 'Inbound email via Mandrill',
    'page callback' => 'mandrill_groups_process_webhook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['mandrill/add/route'] = array(
    'title' => 'Mandrill Add Route',
    'description' => 'Add a route to a Mandrill domain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_add_routes_form'),
    'file' => 'mandrill_groups.admin.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function mandrill_groups_node_info() {
  // Define content types.
  return array(
    'mandrill_groups_group' => array(
      'name' => t('Mandrill Group'),
      'base' => 'mandrill_groups',
      'description' => t('Users subscribe to a Mandrill Group to be notified of all new Mandrill Discussions within that group.'),
      'title_label' => t('Mandrill Group name'),
      // Set the 'locked' attribute to TRUE, so users won't be able to change
      // our content type.
      'locked' => TRUE,
    ),
    'mandrill_groups_discussion' => array(
      'name' => t('Mandrill Discussion'),
      'base' => 'mandrill_groups',
      'description' => t('Discussion thread that is part of a Mandrill Group. Users may opt in or out of individual Mandrill Discussions.'),
      'title_label' => t('Mandrill Discussion topic'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Create and add the Organic Groups reference field.
 */
function mandrill_groups_create_fields() {
  // Clear the field cache so the field type is found.
  field_cache_clear();
  $automatic_fields = array(
    MANDRILL_GROUPS_OG_REFERENCE_FIELD => array(
      'field_name' => MANDRILL_GROUPS_OG_REFERENCE_FIELD,
      'type' => 'entityreference',
      'locked' => FALSE,
      'cardinality' => 1,
      'settings' => array(
        'target_type' => 'node',
        'handler' => 'og',
        'handler_settings' => array(
          'target_bundles' => array(
            'mandrill_groups_group' => 'mandrill_groups_group',
          ),
        ),
      ),
    ),
    MANDRILL_GROUPS_EMAIL_FIELD => array(
      'field_name' => MANDRILL_GROUPS_EMAIL_FIELD,
      'type' => 'text',
      'locked' => TRUE,
      'settings' => array(
        'no_ui' => FALSE,
      ),
    ),
  );
  // If the fields don't already exist, create them.
  foreach ($automatic_fields as $field_name => $field_def) {
    $prior_field = field_read_field($field_name, array('include_inactive' => TRUE));
    if (empty($prior_field)) {
      $new_field = $field_def;
      field_create_field($new_field);
    }
  }
}

 * Implements hook_form().
 *
 * Drupal needs us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * We could get fancy with this form, but we're punting
 * and returning the default form that node_content provides.
 */
function mandrill_groups_form($node, $form_state) {
  $form = node_content_form($node, $form_state);
  if (isset($node->nid)) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    list($default_name, $default_domain) = explode('@', $node_wrapper->mandrill_groups_email->value());
  }
  $form['email_user'] = array(
    '#type' => 'machine_name',
    '#title' => 'Email Address (name)',
    '#default_value' => isset($default_name) ? $default_name : $node->title,
    '#maxlength' => 32,
    '#machine_name' => array(
      // @todo: replace this with a false() function and do our own validation
      // @      to allow for duplicate machine names under different domains.
      'exists' => FALSE,
      'source' => array('title'),
      'label' => t('Email Name'),
    ),
    '#element_validate' => array('mandrill_groups_validate_group_email'),
    '#description' => t('A unique email name for this list. It must only contain lowercase letters, numbers, and underscores. The @domain part of the email address is selected below.'),
  );
  $inbound = mandrill_get_inbound_domains();
  $domain_options = array();
  foreach ($inbound as $domain) {
    $domain_options[$domain['domain']] = '@' . $domain['domain'];
    if (!$domain['valid_mx']) {
      $domain_options[$domain['domain']] .= ' (mx not validated)';
    }
  }
  $form['email_domain'] = array(
    '#type' => 'select',
    '#title' => 'Email Domain (@domain.com)',
    '#options' => $domain_options,
    '#default_value' => isset($default_domain) ? $default_domain : '',
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function mandrill_groups_form_mandrill_groups_group_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the group email field, which is being built from other form elements
  // added in mandrill_groups_form().
  $form['mandrill_groups_email']['#access'] = FALSE;
  $form['#validate'][] = 'mandrill_groups_apply_form_settings';
}

function mandrill_groups_validate_group_email($element, $form_state) {
  $email = $form_state['input']['email_user'] . '@' . $form_state['input']['email_domain'];
  $existing_node = mandrill_groups_load_by_mail($email);
  if (empty($existing_node)) {
    return;
  }
  if (!isset($form_state['node']->nid) || $form_state['node']->nid != $existing_node->nid) {
    form_error($element, t('The email address @email is already in use, please pick another.', array('@email' => $email)));
  }
}

/**
 * Validator to insert email address inputs into the proper field.
 */
function mandrill_groups_apply_form_settings($form, &$form_state) {
  $form_state['values']['mandrill_groups_email'][$form_state['values']['language']][0]['value'] = $form_state['values']['email_user'] . '@' . $form_state['values']['email_domain'];
}

/**
 * Webhook processing for mandrill_groups.
 */
function mandrill_groups_process_webhook() {
  if (!isset($_POST)) {
    return "Mandrill Groups Webhook Endpoint.";
  }
  // Validate any submissions with $_POST variables to confirm they are from
  // Mandrill.
  elseif (!mandrill_groups_webhook_validate()) {
    return 'Invalid signature.';
  }
  $events = drupal_json_decode($_POST['mandrill_events']);
  foreach ($events as $event) {
    // Process events:
    mandrill_groups_create_comment($event['msg']);
  }
  return count($events) . " events processed.";
}

/**
 * Validate that a webhook with post data is coming from Mandrill.
 * 
 * See http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 */
function mandrill_groups_webhook_validate() {
  $url = $GLOBALS['base_url'] . '/mandrill/webhook/groups?domain=' . $_GET['domain'];
  $key = NULL;
  $webhooks = mandrill_get_webhooks();
  foreach ($webhooks as $webhook) {
    if ($webhook['url'] == $url) {
      $key = $webhook['auth_key'];
      break;
    }
  }
  if (!$key) {
    return FALSE;
  }
  ksort($_POST);
  foreach ($_POST as $arg => $val) {
    $url .= $arg . $val;
  }
  $key = base64_encode(hash_hmac('sha1', $url, $key, TRUE));
  return $key == $_SERVER['HTTP_X_MANDRILL_SIGNATURE'];
}

///**
// * Implements hook_node_validate().
// */
//function mandrill_groups_node_validate($node, $form, &$form_state) {
//  if ($node->type == 'mandrill_groups_group') {
//    if (!_mandrill_groups_field_unique($node)) {
//      form_set_error('title', $message = 'This group name is already in use. Please provide a unique group name.');
//    }
//  }
//  elseif ($node->type == 'mandrill_groups_discussion') {
//    if (!_mandrill_groups_field_unique($node)) {
//      form_set_error('title', $message = 'This topic is already in use. Please provide a unique topic.');
//    }
//  }
//}
//
///**
// * Ensure node title is unique for a given node bundle.
// */
//function _mandrill_groups_field_unique($node) {
//  $query = new EntityFieldQuery();
//  $query->entityCondition('entity_type', 'node')
//    ->entityCondition('bundle', $node->type)
//    ->propertyCondition('title', $node->title);
//
//  $result = $query->execute();
//
//  if (empty($result['node'])) {
//    return TRUE;
//  }
//
//  return FALSE;
//}

/**
 * Implements hook_form_FORM_ID_alter() for mandrill_groups_group_node_form().
 */
function mandrill_groups_form_mandrill_groups_discussion_node_form_alter(&$form, &$form_state, $form_id) {
  // Do not allow users to set the Mandrill Groups Email field.
  // This field is set programatically using the title, which is validated
  // for uniqueness, in mandrill_groups_node_presave().
  $form['mandrill_groups_email']['#access'] = FALSE;
//  // Hide field that sets associated group for discussion being created
//  // because group is determined programatically when user does not have
//  // permission to create Mandrill Groups.
//  if (!user_access('create mandrill_groups_group content')) {
//    $form['og_group_ref']['#access'] = FALSE;
//  }
//  if (isset($_GET['nid'])) {
//    // @todo - isn't working
//    $form["field_accounts"][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['nid'];
//  }
//  $form['#submit'][] = 'tmp_set_value';
}

//function tmp_set_value(&$form, &$form_state) {
//  form_set_value('og_group_ref', $_GET['nid'], $form_state);
//}

///**
// * Implements hook_node_presave().
// */
//function mandrill_groups_node_presave($node) {
//  $node_wrapper = entity_metadata_wrapper('node', $node);
//  // Set Mandrill Groups Email field using unique title property.
//  $node_wrapper->mandrill_groups_email->set(preg_replace('@[^a-z0-9-]+@', '-', strtolower($node->title)));
//}

/**
 * Implements hook_node_view_alter().
 */
function mandrill_groups_node_view_alter(&$build) {
  // Add link to Mandrill Group full node view to create discussion
  // Include group nid in URL to be used in setting default value on Mandrill
  // Discussion node form.
  if ($build['#bundle'] == 'mandrill_groups_group' && $build['#view_mode'] == 'full') {
    $build['add_discussion'] = array(
      '#markup' => '<a href="/node/add/mandrill-groups-discussion?nid=' . $build['#node']->nid . '">Add discussion</a>',
    );
  }
}

/**
 * Create a new comment based on an email received via Mandrill.
 *
 * Formatting for the subject of the message will be special when attached to
 * an existing discussion, adding a tag to identify the discussion. Example:
 *
 * subject text [#MGD000001]
 *
 * If no #MGD tag is included, or an invalid number is given, a new discussion
 * will be created.
 */
function mandrill_groups_create_comment($message) {
  $user = user_load_by_mail($message['from_email']);
  if (!$user) {
    watchdog('mandrill_groups', 'Message from %email denied: no user with that email address exists.',
      array(
        '%email' => $message['from_email'],
      ));
    return FALSE;
  }
  $group = mandrill_groups_load_by_mail($message['email']);
  if (empty($group)) {
    watchdog('mandrill_groups', 'Message from %email denied: no group with the email address %groupemail exists.',
      array(
        '%email' => $message['from_email'],
        '%groupemail' => $message['email'],
      ));
    return FALSE;
  }
  if (!og_is_member('node', $group->nid, 'user', $user)) {
    // This email address doesn't have access to this group.
    watchdog('mandrill_groups', 'Message from %email denied because no user with that email address has access to group %groupname (NID: %groupid)',
      array(
        '%email' => $message['from_email'],
        '%groupname' => $group->title,
        '%groupid' => $group->nid,
      ));
    return FALSE;
  }
  // Parse the subject line to extract a discussion ID, if present:
  list($subject, $discussion_tag) = explode('[#MGD', $message['subject']);
  $subject = trim($subject);
  $discussion_tag = trim($discussion_tag, '] ');
  $discussion_id = (int) $discussion_tag;
  // Load existing discussion, or create a new one:
  $discussion = $discussion_id ? node_load($discussion_id) : mandrill_groups_create_discussion($subject, $group);
  $discussion_wrapper = entity_metadata_wrapper('node', $discussion);
  // Verify the discussion matches the group attached to this email address:
  if ($group->nid != $discussion_wrapper->MANDRILL_GROUPS_OG_REFERENCE_FIELD->raw()) {
    // Trying to post to a discussion using wrong group email.
    watchdog('mandrill_groups', 'Message from %email for discussion %discussion denied because the wrong targeting email was used (%groupemail)',
      array(
        '%email' => $message['from_email'],
        '%discussion' => $discussion->nid,
        '%groupemail' => $message['email'],
      ));
    return FALSE;
  }
  $comment_body = array(
    'value' => $message['html'],
    'format' => 'mandrill_groups_html',
  );
  $values = array(
    'subject' => $subject,
    'uid' => $user->uid,
    'nid' => $discussion->nid,
    'mail' => $message['from_email'],
    'name' => $user->name,
    'date' => 'now',
    'status' => COMMENT_PUBLISHED,
    'node_type' => 'comment_node_mandrill_groups_discussion',
  );
  $comment = entity_create('comment', $values);
  $wrapper = entity_metadata_wrapper('comment', $comment);
  $wrapper->comment_body->set($comment_body);
  // If you use more standard save methodology, the comment gets lost, so:
  comment_submit($comment);
  comment_save($comment);

  watchdog('mandrill_groups', 'Comment posted: %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)));
  return $comment;
}

/**
 * Load a Mandrill group node based on the group email.
 *
 * @return node[]
 *   Depending whether $email is set, an array of groups or a single one.
 */
function mandrill_groups_load_by_mail($email = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'mandrill_groups_group', '=');
  if ($email) {
    $query->fieldCondition('mandrill_groups_email', 'value', $email);
  }
  $results = $query->execute();
  if (isset($results['node'])) {
    $result_ids = array_keys($results['node']);
    $first = reset($result_ids);
    return $email ? node_load($first) : node_load_multiple($result_ids);
  }
  else {
    return array();
  }
}

/**
 * Create a new discussion within a group.
 */
function mandrill_groups_create_discussion($subject, $group) {
  $values = array(
    'type' => 'mandrill_groups_discussion',
    'uid' => $group->uid,
    'title' => $subject,
    'status' => 1,
    'comment' => 2,
    'promote' => 0,
  );
  $discussion = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $discussion);
  $wrapper->MANDRILL_GROUPS_OG_REFERENCE_FIELD->set((int) $group->nid);
  $wrapper->save();
  return $discussion;
}
