<?php

/**
 * @file
 * Allows for creation and management of discussion groups that can be
 * interacted with via Drupal or email.
 */

/**
 * Implements hook_menu().
 */
function mandrill_groups_menu() {
  $items = array();

  $items['admin/config/services/mandrill/groups'] = array(
    'title' => 'Groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_settings_form'),
    'access arguments' => array('administer mandrill'),
    'description' => 'Handles Mandrill Incoming Webhooks',
    'file' => 'mandrill_groups.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['mandrill/webhook/groups'] = array(
    'title' => 'Mandrill Inbound',
    'description' => 'Inbound email via Mandrill',
    'page callback' => 'mandrill_groups_process_webhook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function mandrill_groups_node_info() {
  // Define content types.
  return array(
    'mandrill_groups_group' => array(
      'name' => t('Mandrill Group'),
      'base' => 'mandrill_groups',
      'description' => t('Users subscribe to a Mandrill Group to be notified of all new Mandrill Discussions within that group.'),
      'title_label' => t('Mandrill Group name'),
      // Set the 'locked' attribute to TRUE, so users won't be able to change
      // our content type.
      'locked' => TRUE,
    ),
    'mandrill_groups_discussion' => array(
      'name' => t('Mandrill Discussion'),
      'base' => 'mandrill_groups',
      'description' => t('Discussion thread that is part of a Mandrill Group. Users may opt in or out of individual Mandrill Discussions.'),
      'title_label' => t('Mandrill Discussion topic'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * We could get fancy with this form, but we're punting
 * and returning the default form that node_content provides.
 */
function mandrill_groups_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Webhook processing for mandrill_groups.
 */
function mandrill_groups_process_webhook() {
  if (!isset($_POST)) {
    return "Mandrill Groups Webhook Endpoint.";
  }
  // Validate any submissions with $_POST variables to confirm they are from
  // Mandrill.
  elseif (!mandrill_groups_webhook_validate()) {
    return 'Invalid signature.';
  }
  $events = drupal_json_decode($_POST['mandrill_events']);
  foreach ($events as $event) {
    // process events
  }
  return count($events) . " events processed.";
}

/**
 * Validate that a webhook with post data is coming from Mandrill.
 */
function mandrill_groups_webhook_validate() {
  $url = $GLOBALS['base_url'] . '/mandrill/webhook/groups?domain=' . $_GET['domain'];
  $key = NULL;
  $webhooks = mandrill_get_webhooks();
  foreach ($webhooks as $webhook) {
    if ($webhook['url'] == $url) {
      $key = $webhook['auth_key'];
      break;
    }
  }
  if (!$key) {
    return FALSE;
  }
  ksort($_POST);
  foreach ($_POST as $arg => $val) {
    $url .= $arg . $val;
  }
  $key = base64_encode(hash_hmac('sha1', $url, $key, TRUE));
  return $key == $_SERVER['HTTP_X_MANDRILL_SIGNATURE'];
}

///**
// * Implements hook_node_validate().
// */
//function mandrill_groups_node_validate($node, $form, &$form_state) {
//  if ($node->type == 'mandrill_groups_group') {
//    if (!_mandrill_groups_field_unique($node)) {
//      form_set_error('title', $message = 'This group name is already in use. Please provide a unique group name.');
//    }
//  }
//  elseif ($node->type == 'mandrill_groups_discussion') {
//    if (!_mandrill_groups_field_unique($node)) {
//      form_set_error('title', $message = 'This topic is already in use. Please provide a unique topic.');
//    }
//  }
//}
//
///**
// * Ensure node title is unique for a given node bundle.
// */
//function _mandrill_groups_field_unique($node) {
//  $query = new EntityFieldQuery();
//  $query->entityCondition('entity_type', 'node')
//    ->entityCondition('bundle', $node->type)
//    ->propertyCondition('title', $node->title);
//
//  $result = $query->execute();
//
//  if (empty($result['node'])) {
//    return TRUE;
//  }
//
//  return FALSE;
//}

/**
 * Implements hook_form_FORM_ID_alter() for mandrill_groups_group_node_form().
 */
function mandrill_groups_form_mandrill_groups_group_node_form_alter(&$form, &$form_state, $form_id) {
  // Do not allow users to set the Mandrill Groups Email field.
  // This field is set programatically using the title, which is validated
  // for uniqueness, in mandrill_groups_node_presave().
  $form['mandrill_groups_email']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for mandrill_groups_group_node_form().
 */
function mandrill_groups_form_mandrill_groups_discussion_node_form_alter(&$form, &$form_state, $form_id) {
  // Do not allow users to set the Mandrill Groups Email field.
  // This field is set programatically using the title, which is validated
  // for uniqueness, in mandrill_groups_node_presave().
  $form['mandrill_groups_email']['#access'] = FALSE;
//  // Hide field that sets associated group for discussion being created
//  // because group is determined programatically when user does not have
//  // permission to create Mandrill Groups.
//  if (!user_access('create mandrill_groups_group content')) {
//    $form['og_group_ref']['#access'] = FALSE;
//  }
//  if (isset($_GET['nid'])) {
//    // @todo - isn't working
//    $form["field_accounts"][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['nid'];
//  }
//  $form['#submit'][] = 'tmp_set_value';
}

//function tmp_set_value(&$form, &$form_state) {
//  form_set_value('og_group_ref', $_GET['nid'], $form_state);
//}

///**
// * Implements hook_node_presave().
// */
//function mandrill_groups_node_presave($node) {
//  $node_wrapper = entity_metadata_wrapper('node', $node);
//  // Set Mandrill Groups Email field using unique title property.
//  $node_wrapper->mandrill_groups_email->set(preg_replace('@[^a-z0-9-]+@', '-', strtolower($node->title)));
//}

/**
 * Implements hook_node_view_alter().
 */
function mandrill_groups_node_view_alter(&$build) {
  // Add link to Mandrill Group full node view to create discussion
  // Include group nid in URL to be used in setting default value on Mandrill
  // Discussion node form.
  if ($build['#bundle'] == 'mandrill_groups_group' && $build['#view_mode'] == 'full') {
    $build['add_discussion'] = array(
      '#markup' => '<a href="/node/add/mandrill-groups-discussion?nid=' . $build['#node']->nid . '">Add discussion</a>'
    );
  }
}
