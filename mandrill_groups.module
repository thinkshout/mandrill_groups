<?php

/**
 * @file
 * Allows for creation and management of discussion groups that can be
 * interacted with via Drupal or email.
 */

define('MANDRILL_GROUPS_OG_REFERENCE_FIELD', 'mandrill_groups_og_ref');
define('MANDRILL_GROUPS_EMAIL_FIELD', 'mandrill_groups_email');
define('MANDRILL_GROUPS_EMAIL_FREQUENCY_FIELD', 'mandrill_groups_email_frequency');
define('MANDRILL_GROUPS_SUBJECT_FIELD', 'mandrill_groups_subject_prefix');
define('MANDRILL_GROUPS_MEMBERSHIP_TYPE', 'mandrill_groups_membership_type');
define('MANDRILL_GROUPS_POSTSCRIPT_FIELD', 'mandrill_groups_postscript');
define('MANDRILL_GROUPS_GROUP_NODE', 'mandrill_groups_group');
define('MANDRILL_GROUPS_DISCUSSION_NODE', 'mandrill_groups_discussion');
define('MANDRILL_GROUPS_MESSAGE_ID_FIELD', 'mandrill_groups_last_message_id');
define('MANDRILL_GROUPS_MESSAGE_SEPERATOR', "-------- Reply Above This Line --------");
define('MANDRILL_GROUPS_WEBHOOK_ENDPOINT', 'mandrill/webhook/groups');

/**
 * Implements hook_menu().
 */
function mandrill_groups_menu() {
  $items = array();

  $items['admin/config/services/mandrill/groups'] = array(
    'title' => 'Groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_settings_form'),
    'access callback' => array('mandrill_groups_access'),
    'description' => 'Handles Mandrill Incoming Webhooks',
    'file' => 'includes/mandrill_groups.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items[MANDRILL_GROUPS_WEBHOOK_ENDPOINT] = array(
    'title' => 'Mandrill Inbound',
    'description' => 'Inbound email via Mandrill',
    'page callback' => 'mandrill_groups_process_webhook',
    'access callback' => array('mandrill_groups_webhook_access'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/discussions'] = array(
    'title' => 'Discussions',
    'page callback' => 'mandrill_groups_node_discussions',
    'page arguments' => array(1),
    'access callback' => 'mandrill_groups_node_discussion_access',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/config/services/mandrill/groups/%/delete'] = array(
    'title' => 'Delete Inbound Domain Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_groups_inbound_domain_delete_form', 5),
    'access arguments' => array('administer mandrill'),
    'file' => 'includes/mandrill_groups.admin.inc',
  );

  return $items;
}

/**
 * Access callback for mandrill_groups.
 *
 * @return bool
 *   True if current user has access to administer mandrill and valid Mandrill
 *   API key is present, else false.
 */
function mandrill_groups_access() {
  $access = user_access('administer mandrill');
  $valid_api_key = variable_get('mandrill_api_key');
  return $access & !empty($valid_api_key);
}

/**
 * Implements hook_permission().
 */
function mandrill_groups_permission() {
  return array(
    'administer mandrill discussion group' => array(
      'title' => t('Administer Mandrill Discussion Group'),
      'description' => t('Select which Mandrill Group a Mandrill Discussion is related to.'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Access callback for "Discussion" tab on Group nodes.
 *
 * Only show tab if user is a member of the Group.
 *
 * @param array $group
 *   Group being accessed.
 *
 * @return bool
 *   Return True if user is a member of the current Group.
 */
function mandrill_groups_node_discussion_access($group) {
  global $user;
  if (!og_is_member('node', $group->nid, 'user', $user)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Get all discussions for the current Group.
 *
 * @param array $group
 *   The group that is currently being viewed.
 *
 * @return array
 *   An array of rendered discussions for the current Group.
 */
function mandrill_groups_node_discussions($group) {

  // Construct database query to get all discussions related to the current
  // Group. Note that use of EFQ here is not advised, as OG alters EFQ queries.
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->leftJoin('field_data_mandrill_groups_og_ref', 'g', 'n.nid = g.entity_id');
  $query->condition('n.status', NODE_PUBLISHED);
  $query->condition('g.entity_type', 'node');
  $query->condition('g.mandrill_groups_og_ref_target_id', $group->nid);
  $query->orderBy('n.changed', 'DESC');
  $result = $query->execute();

  // Add link to create discussion if the user has permission to.
  $discussions = array();
  if (og_user_access('node', $group->nid, 'create ' . MANDRILL_GROUPS_DISCUSSION_NODE . ' content')) {
    // Include group nid in URL to be used in setting default value on Mandrill
    // Discussion node form.
    $discussions['add_discussion'] = array(
      '#markup' => '<ul class="action-links"><li><a href="/node/add/mandrill-groups-discussion?nid=' . $group->nid . '">Add discussion</a></li></ul>',
    );
  }

  // Create render array of discussion teasers.
  foreach ($result as $nid) {
    $node = node_load($nid->nid);
    $discussion_teaser = node_view($node, 'teaser');
    $discussions[] = array(
      '#type' => 'markup',
      '#markup' => render($discussion_teaser),
    );
  }

  return $discussions;
}

/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function mandrill_groups_node_info() {
  // Define content types.
  return array(
    MANDRILL_GROUPS_GROUP_NODE => array(
      'name' => t('Mandrill Group'),
      'base' => 'mandrill_groups',
      'description' => t('Users subscribe to a Mandrill Group to be notified of all new Mandrill Discussions within that group.'),
      'title_label' => t('Group Name'),
      // 'Locked' protects the machine name of this bundle from alteration.
      'locked' => TRUE,
    ),
    MANDRILL_GROUPS_DISCUSSION_NODE => array(
      'name' => t('Mandrill Discussion'),
      'base' => 'mandrill_groups',
      'description' => t('Discussion thread that is part of a Mandrill Group. Users may opt in or out of individual Mandrill Discussions.'),
      'title_label' => t('Discussion Topic'),
      'locked' => TRUE,
    ),
  );
}
/**
 * Implements hook_entity_property_info_alter().
 */
function mandrill_groups_entity_property_info_alter(&$info) {
  $info['comment']['properties']['mandrill_groups_message_id'] = array(
    'label' => t('Outgoing Message-ID'),
    'description' => t('The email Message-ID header value for a Mandrill Groups comment.'),
    'type' => 'text',
    'schema field' => 'mandrill_groups_message_id',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['comment']['properties']['mandrill_groups_original_msg_id'] = array(
    'label' => t('Original Message-ID'),
    'description' => t('The email Message-ID header value from an email-generated comment.'),
    'type' => 'text',
    'schema field' => 'mandrill_groups_original_msg_id',
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_schema_alter().
 */
function mandrill_groups_schema_alter(&$schema) {
  $schema['comment']['fields']['mandrill_groups_message_id'] = array(
    'description' => 'The email header Message-ID value of the comment.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => NULL,
  );
  $schema['comment']['fields']['mandrill_groups_original_msg_id'] = array(
    'description' => 'The email Message-ID header value from an email-generated comment.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => NULL,
  );
}

/**
 * Implements hook_form().
 */
function mandrill_groups_form($node, $form_state) {
  $form = node_content_form($node, $form_state);
  if ($node->type == MANDRILL_GROUPS_GROUP_NODE) {
    if (isset($node->nid)) {
      $node_wrapper = entity_metadata_wrapper('node', $node);
      list($default_name, $default_domain) = explode('@', $node_wrapper->mandrill_groups_email->value());
    }
    $form['email_user'] = array(
      '#type' => 'machine_name',
      '#title' => 'Email Address (name)',
      '#default_value' => isset($default_name) ? $default_name : $node->title,
      '#maxlength' => 32,
      '#machine_name' => array(
        'exists' => FALSE,
        'source' => array('title'),
        'label' => t('Email Name'),
      ),
      '#element_validate' => array('mandrill_groups_validate_group_email'),
      '#description' => t('A unique email name for this list. It must only contain lowercase letters, numbers, and underscores. The @domain part of the email address is selected below.'),
    );
    $domain_options = array();
    if ($inbound = mandrill_get_inbound_domains()) {
      foreach ($inbound as $domain) {
        $domain_options[$domain['domain']] = '@' . $domain['domain'];
        if (!$domain['valid_mx']) {
          $domain_options[$domain['domain']] .= ' (mx not validated)';
        }
      }
    }
    $form['email_domain'] = array(
      '#type' => 'select',
      '#title' => 'Email Domain (@domain.com)',
      '#options' => $domain_options,
      '#default_value' => isset($default_domain) ? $default_domain : '',
      '#required' => TRUE,
    );
    
  }
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function mandrill_groups_form_mandrill_groups_group_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide the group email field, which is being built from other form elements
  // added in mandrill_groups_form().
  $form['mandrill_groups_email']['#access'] = FALSE;
  $form['#validate'][] = 'mandrill_groups_apply_form_settings';
}

/**
 * Field validator that looks for a unique email_user/email_domain combo.
 */
function mandrill_groups_validate_group_email($element, $form_state) {
  $email = $form_state['input']['email_user'] . '@' . $form_state['input']['email_domain'];
  $existing_node = mandrill_groups_load_by_mail($email);
  if (empty($existing_node)) {
    return;
  }
  if (!isset($form_state['node']->nid) || $form_state['node']->nid != $existing_node->nid) {
    form_error($element, t('The email address @email is already in use, please pick another.', array('@email' => $email)));
  }
}

/**
 * Validator to insert email address inputs into the proper field.
 */
function mandrill_groups_apply_form_settings($form, &$form_state) {
  $form_state['values']['mandrill_groups_email'][$form_state['values']['language']][0]['value'] = $form_state['values']['email_user'] . '@' . $form_state['values']['email_domain'];
}

/**
 * Webhook processing for mandrill_groups.
 */
function mandrill_groups_process_webhook() {
  // When the route is being verified, just return an empty string.
  if ($_SERVER['REQUEST_METHOD'] == 'HEAD') {
    return "";
  }

  $events = drupal_json_decode($_POST['mandrill_events']);
  foreach ($events as $event) {
    // Process events:
    mandrill_groups_process_message($event['msg']);
  }
  return count($events) . " events processed.";
}

/**
 * Validate that a webhook with post data is coming from Mandrill.
 * 
 * See http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests
 */
function mandrill_groups_webhook_access() {
  // Mandrill verifies new inbound routes with a HEAD request.
  // @see http://help.mandrill.com/entries/22024856-Why-can-t-my-webhook-or-inbound-route-URL-be-verified-.
  if ($_SERVER['REQUEST_METHOD'] == 'HEAD') {
    return TRUE;
  }

  if (!isset($_POST)) {
    return FALSE;
  }

  $url = $_SERVER['HTTP_X_FORWARDED_PROTO'] . '://' . $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];
  $auth_key = NULL;
  $webhooks = mandrill_get_webhooks();
  foreach ($webhooks as $webhook) {
    if ($webhook['url'] == $url) {
      $auth_key = $webhook['auth_key'];
      break;
    }
  }
  if (!$auth_key) {
    return FALSE;
  }
  ksort($_POST);
  foreach ($_POST as $arg => $val) {
    $url .= $arg . $val;
  }
  $signature = base64_encode(hash_hmac('sha1', $url, $auth_key, TRUE));
  return $signature == $_SERVER['HTTP_X_MANDRILL_SIGNATURE'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM ID: mandrill_groups_discussion_node_form.
 */
function mandrill_groups_form_mandrill_groups_discussion_node_form_alter(&$form, &$form_state, $form_id) {
  // Disable the last message ID field: it is populated automatically.
  $form['mandrill_groups_last_message_id']['#disabled'] = TRUE;
  // Set default value of "Group Membership" field if we have the Group to
  // relate the new discussion to in the URL.
  $params = drupal_get_query_parameters();
  if (isset($params['nid'])) {
    $form['mandrill_groups_og_ref'][$form['language']['#value']][0]['default']['#default_value'][0] = $params['nid'];
  }
  // If we know what group is connected, don't let non-admins muck with it.
  if (isset($form['mandrill_groups_og_ref'][$form['language']['#value']][0]['default']['#default_value'][0])) {
    $form['mandrill_groups_og_ref']['#disabled'] = !user_access('administer content');
  }
  $form['#validate'][] = 'mandrill_groups_add_discussion_group';
}

/**
 * Relate Discussion node to a Group.
 *
 * Validator function for the Discussion node add form that relates the
 * Discussion being created to a Group if a Group nid is passed via the URL.
 */
function mandrill_groups_add_discussion_group(&$form, &$form_state) {
  $params = drupal_get_query_parameters();
  if (isset($params['nid'])) {
    form_set_value($form['mandrill_groups_og_ref'], array(
      LANGUAGE_NONE => array(
        0 => array(
          'target_id' => $params['nid'],
          'field_mode' => 'default',
        ),
      ),
    ), $form_state);
  }
}

/**
 * Create a new comment based on an email received via Mandrill.
 *
 * Formatting for the subject of the message will be special when attached to
 * an existing discussion, adding a tag to identify the discussion. Example:
 *
 * email address: username+MGD0001@domain.tld
 *
 * If no #MGD tag is included, or an invalid number is given, a new discussion
 * will be created.
 */
function mandrill_groups_process_message($message) {
  $user = user_load_by_mail($message['from_email']);
  if (!$user) {
    watchdog('mandrill_groups', 'Message from %email denied: no user with that email address exists.',
      array(
        '%email' => $message['from_email'],
      ));
    return FALSE;
  }
  list($email_username, $email_domain) = explode('@', $message['email']);
  list($email_username, $discussion_tag) = explode('+MGD', $email_username);
  $from_email = $email_username . '@' . $email_domain;
  $group = mandrill_groups_load_by_mail($from_email);
  if (empty($group)) {
    watchdog('mandrill_groups', 'Message from %email denied: no group with the email address %groupemail exists.',
      array(
        '%email' => $message['from_email'],
        '%groupemail' => $message['email'],
      ));
    return FALSE;
  }
  if (!strcasecmp(trim($message['subject']), 'unsubscribe')) {
    og_ungroup('node', $group->nid, 'user', $user->uid);
    // An unsubscribe has been processed.
    watchdog('mandrill_groups', 'Unsubscribe from %email processed for group %groupname (NID: %groupid)',
      array(
        '%email' => $message['from_email'],
        '%groupname' => $group->title,
        '%groupid' => $group->nid,
      ));
    return TRUE;
  }
  if (!og_is_member('node', $group->nid, 'user', $user)) {
    // This email address doesn't have access to this group.
    watchdog('mandrill_groups', 'Message from %email denied because no user with that email address has access to group %groupname (NID: %groupid)',
      array(
        '%email' => $message['from_email'],
        '%groupname' => $group->title,
        '%groupid' => $group->nid,
      ));
    return FALSE;
  }
  // Load existing discussion, or create a new one:
  $discussion_id = (int) $discussion_tag;
  $discussion = $discussion_id ? node_load($discussion_id) : mandrill_groups_create_discussion($message['subject'], $group, $user);
  $discussion_wrapper = entity_metadata_wrapper('node', $discussion);
  // Verify the discussion matches the group attached to this email address:
  if ($group->nid != $discussion_wrapper->{MANDRILL_GROUPS_OG_REFERENCE_FIELD}->raw()) {
    // Trying to post to a discussion using wrong group email.
    watchdog('mandrill_groups', 'Message from %email for discussion %discussion denied because the wrong targeting email was used (%groupemail)',
      array(
        '%email' => $message['from_email'],
        '%discussion' => $discussion->nid,
        '%groupemail' => $message['email'],
      ));
    return FALSE;
  }
  $comment_body = array(
    'value' => _mandrill_groups_filter_reply($message['html']),
    'format' => 'mandrill_groups_html',
  );
  $values = array(
    'subject' => $message['subject'],
    'uid' => $user->uid,
    'nid' => $discussion->nid,
    'mail' => $message['from_email'],
    'name' => $user->name,
    'date' => 'now',
    'status' => COMMENT_PUBLISHED,
    'node_type' => 'comment_node_' . MANDRILL_GROUPS_DISCUSSION_NODE,
    'mandrill_groups_original_msg_id' => isset($message['headers']['Message-Id']) ? $message['headers']['Message-Id'] : NULL,
  );
  $comment = entity_create('comment', $values);
  $wrapper = entity_metadata_wrapper('comment', $comment);
  $wrapper->comment_body->set($comment_body);
  // If you use more standard save methodology, the comment gets lost, so:
  comment_submit($comment);
  comment_save($comment);

  watchdog('mandrill_groups', 'Comment posted: %subject.', array('%subject' => $comment->subject), WATCHDOG_NOTICE, l(t('view'), 'comment/' . $comment->cid, array('fragment' => 'comment-' . $comment->cid)));
  return $comment;
}

function _mandrill_groups_filter_reply($message) {
  $reply_line_position = strpos($message, MANDRILL_GROUPS_MESSAGE_SEPERATOR);
  $quote_tags = variable_get('mandrill_groups_filter_tags', '');
  $tags_array = explode(',', $quote_tags);
  foreach ($tags_array as $tag) {
    $div_tag = '<div class="' . trim($tag) . '">';
    $reply_line_position = min($reply_line_position, strpos($message, $div_tag));
  } 
  $prior_close_tag_position = strrpos($message, '</', $reply_line_position - strlen($message));
  $next_open_tag_position = strpos($message, '<', $prior_close_tag_position + 2);
  // @todo replace "substr" with intelligent parsing of html tags to leave
  // closing of tags at end.
  $post = substr($message, 0, $next_open_tag_position);
  return $post;
}

/**
 * Load a Mandrill group node based on the group email.
 *
 * @return node[]
 *   Depending whether $email is set, an array of groups or a single one.
 */
function mandrill_groups_load_by_mail($email = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', MANDRILL_GROUPS_GROUP_NODE, '=');
  if ($email) {
    $query->fieldCondition('mandrill_groups_email', 'value', $email);
  }
  $results = $query->execute();
  if (isset($results['node'])) {
    $result_ids = array_keys($results['node']);
    $first = reset($result_ids);
    return $email ? node_load($first) : node_load_multiple($result_ids);
  }
  else {
    return array();
  }
}

/**
 * Create a new discussion within a group.
 */
function mandrill_groups_create_discussion($subject, $group, $user) {
  $values = array(
    'type' => MANDRILL_GROUPS_DISCUSSION_NODE,
    'uid' => $user->uid,
    'title' => $subject,
  );
  $discussion = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $discussion);
  $wrapper->{MANDRILL_GROUPS_OG_REFERENCE_FIELD}->set((int) $group->nid);
  $wrapper->save();
  return $discussion;
}

/**
 * Implements hook_comment_insert().
 */
function mandrill_groups_comment_insert($comment) {
  if ($comment->node_type != 'comment_node_' . MANDRILL_GROUPS_DISCUSSION_NODE) {
    return;
  }
  // Load posting user:
  $author = user_load($comment->uid);
  // Load parent group.
  $node = node_load($comment->nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  // We want to set the reply-to header to match a previous message sent from
  // this system for threading purposes.
  $reply_to_id = $node_wrapper->{MANDRILL_GROUPS_MESSAGE_ID_FIELD}->value();
  // If this is the first message, and no ID is available, we set the reply-to
  // to be the initializing email message ID for the benefit of the person who
  // created this email.
  if (empty($reply_to_id) && ($comment->mandrill_groups_original_msg_id)) {
    $reply_to_id = $comment->mandrill_groups_original_msg_id;
  }
  $comment->mandrill_groups_message_id = '<' . date('YmdHis') . '.' . $comment->cid . '.' . $comment->nid . '@' . $_SERVER['HTTP_HOST'] . '>';
  $node_wrapper->{MANDRILL_GROUPS_MESSAGE_ID_FIELD}->set($comment->mandrill_groups_message_id);
  $node_wrapper->save();
  // Load active members.
  $members = $node_wrapper->mandrill_groups_og_ref->members__1->value();
  // @todo Check subscription data.
  // @todo Check delivery preferences.
  // Create email.
  $addresses = array();
  foreach ($members as $member) {
    $addresses[] = $member->mail;
  }
  $content = field_view_field('comment', $comment, 'comment_body');
  $message = array(
    'id' => MANDRILL_GROUPS_DISCUSSION_NODE,
    'subject' => $node->title,
    'body' => array($content[0]['#markup']),
    'mandrill' => array(
      'header' => array(
        'Message-Id' => $comment->mandrill_groups_message_id,
      ),
      'from_name' => $author->name . ' via ' . variable_get('site_name', 'Drupal Site'),
      'overrides' => array(
        'preserve_recipients' => FALSE,
      ),
    ),
  );
  if (isset($node_wrapper->mandrill_groups_og_ref->{MANDRILL_GROUPS_SUBJECT_FIELD})) {
    $message['subject'] = $node_wrapper->mandrill_groups_og_ref->{MANDRILL_GROUPS_SUBJECT_FIELD}->value() . $message['subject'];
  }

  if (!empty($reply_to_id)) {
    $message['mandrill']['header']['In-Reply-To'] = $reply_to_id;
  }
  entity_save('comment', $comment);
  mandrill_groups_send_email($addresses, $message, $node);
}

/**
 * Send a message relate to a particular discussion.
 *
 * This function appends the appropriate postscript to emails, whether they are
 * individual comment messages or consolidated messages.
 */
function mandrill_groups_send_email($addresses, $message, $discussion) {
  $discussion_wrapper = entity_metadata_wrapper('node', $discussion);
  $postscript = format_string($discussion_wrapper->mandrill_groups_og_ref->{MANDRILL_GROUPS_POSTSCRIPT_FIELD}->value(), array(
    '@group_name' => $discussion_wrapper->mandrill_groups_og_ref->label(),
    '@site_name' => variable_get('site_name'),
    '@group_email' => $discussion_wrapper->mandrill_groups_og_ref->mandrill_groups_email->value(),
    '@group_link' => $discussion_wrapper->mandrill_groups_og_ref->url->value(),
    '@discussion_link' => $discussion_wrapper->url->value(),
    '@settings_link' => $GLOBALS['base_url'] . '/user',
  ));
  array_unshift($message['body'], MANDRILL_GROUPS_MESSAGE_SEPERATOR . '<br />');
  $message['body'][] = $postscript;
  // Mandrill automatically puts the "From" into "Reply To" and replaces the
  // "From" with the official system email address.
  list($from_user, $from_domain) = explode('@', $discussion_wrapper->mandrill_groups_og_ref->mandrill_groups_email->value());
  $from = $from_user . '+MGD' . $discussion_wrapper->getIdentifier() . '@' . $from_domain;
  // Send Email.
  drupal_mail('mandrill_groups', 'discussion', implode(',', $addresses), 'und', $message, $from);
}

/**
 * Implements hook_mail().
 */
function mandrill_groups_mail($key, &$message, $params) {
  if ($key == 'discussion') {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}

/**
 * Implements theme_preprocess_comment().
 *
 * Hide the comment title on Mandrill discussions.
 */
function mandrill_groups_preprocess_comment(&$variables) {
  $node_type = $variables['node']->type;
  if ($node_type == MANDRILL_GROUPS_DISCUSSION_NODE) {
    $subject_enabled = variable_get('comment_subject_field_' . $node_type, 0);

    if (!$subject_enabled) {
      // Don't display the comment title.
      $variables['title_attributes_array']['class'][] = 'element-invisible';
    }
  }
}
